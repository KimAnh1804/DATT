{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\DU LIEU O D\\\\Code\\\\inventory-management3\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\n// Định nghĩa interface cho User\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Khởi tạo loading là true\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      setLoading(true); // Bắt đầu kiểm tra, đặt loading là true\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        try {\n          const payload = JSON.parse(atob(token.split(\".\")[1]));\n          const currentTime = Date.now() / 1000;\n          if (payload.exp > currentTime) {\n            setIsAuthenticated(true);\n            setUser({\n              username: payload.username,\n              id: payload.userId,\n              role: payload.role || \"user\"\n            });\n            try {\n              const response = await fetch(\"http://localhost:5000/api/auth/verify\", {\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              if (response.ok) {\n                const userData = await response.json();\n                setUser(userData.user);\n              } else {\n                console.log(\"Server verification failed, token might be invalid or expired on server.\");\n                localStorage.removeItem(\"token\");\n                setIsAuthenticated(false);\n                setUser(null);\n              }\n            } catch (error) {\n              console.log(\"Server verification failed, but token is valid client-side:\", error);\n              // Nếu server không phản hồi, vẫn giữ trạng thái đăng nhập nếu token client-side hợp lệ\n            }\n          } else {\n            console.log(\"Token expired client-side.\");\n            localStorage.removeItem(\"token\");\n            setIsAuthenticated(false);\n            setUser(null);\n          }\n        } catch (error) {\n          console.error(\"Invalid token format:\", error);\n          localStorage.removeItem(\"token\");\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      }\n      setLoading(false); // Kết thúc kiểm tra, đặt loading là false\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(\"token\", data.token);\n        setIsAuthenticated(true);\n        setUser(data.user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    // Cung cấp trạng thái loading\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }, this);\n}\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuthStatus","token","localStorage","getItem","payload","JSON","parse","atob","split","currentTime","Date","now","exp","username","id","userId","role","response","fetch","headers","Authorization","ok","userData","json","console","log","removeItem","error","login","password","method","body","stringify","data","setItem","logout","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DU LIEU O D/Code/inventory-management3/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useState, useEffect } from \"react\"\n\n// Định nghĩa interface cho User\ninterface User {\n  id: string\n  username: string\n  role: string\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean\n  user: User | null\n  loading: boolean // Thêm trạng thái loading\n  login: (username: string, password: string) => Promise<boolean>\n  logout: () => void\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true) // Khởi tạo loading là true\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      setLoading(true) // Bắt đầu kiểm tra, đặt loading là true\n      const token = localStorage.getItem(\"token\")\n      if (token) {\n        try {\n          const payload = JSON.parse(atob(token.split(\".\")[1]))\n          const currentTime = Date.now() / 1000\n\n          if (payload.exp > currentTime) {\n            setIsAuthenticated(true)\n            setUser({ username: payload.username, id: payload.userId, role: payload.role || \"user\" })\n\n            try {\n              const response = await fetch(\"http://localhost:5000/api/auth/verify\", {\n                headers: {\n                  Authorization: `Bearer ${token}`,\n                },\n              })\n\n              if (response.ok) {\n                const userData = await response.json()\n                setUser(userData.user)\n              } else {\n                console.log(\"Server verification failed, token might be invalid or expired on server.\")\n                localStorage.removeItem(\"token\")\n                setIsAuthenticated(false)\n                setUser(null)\n              }\n            } catch (error) {\n              console.log(\"Server verification failed, but token is valid client-side:\", error)\n              // Nếu server không phản hồi, vẫn giữ trạng thái đăng nhập nếu token client-side hợp lệ\n            }\n          } else {\n            console.log(\"Token expired client-side.\")\n            localStorage.removeItem(\"token\")\n            setIsAuthenticated(false)\n            setUser(null)\n          }\n        } catch (error) {\n          console.error(\"Invalid token format:\", error)\n          localStorage.removeItem(\"token\")\n          setIsAuthenticated(false)\n          setUser(null)\n        }\n      }\n      setLoading(false) // Kết thúc kiểm tra, đặt loading là false\n    }\n\n    checkAuthStatus()\n  }, [])\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        localStorage.setItem(\"token\", data.token)\n        setIsAuthenticated(true)\n        setUser(data.user)\n        return true\n      }\n      return false\n    } catch (error) {\n      console.error(\"Login error:\", error)\n      return false\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    setIsAuthenticated(false)\n    setUser(null)\n  }\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading, // Cung cấp trạng thái loading\n    login,\n    logout,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}